<%= f.label :foraging_range, I18n.t("devise.fallingfruit.foraging_range") %><br />
<span class="subtext"><%= I18n.t("devise.fallingfruit.foraging_range_subtext") %></span><br/>
  <input type="text" placeholder="<%= I18n.t("devise.fallingfruit.address") %>" name="address" id="address">
  <button type="button" onclick="recenter_range_map_to_address();return false;"><%= I18n.t("devise.fallingfruit.zoom_to_address") %></button>
  <button type="button" onclick="clear_range_overlays();return false;"><%= I18n.t("devise.fallingfruit.clear_map") %></button>
<div id="map" style="width:100%;height:400px;"></div>

<div class="field">
  <%= f.label :address, I18n.t("devise.fallingfruit.address") %><br/>
  <span class="subtext"><%= I18n.t("devise.fallingfruit.address_subtext") %></span><br />
  <%= f.text_area :address, :size => "40x6" %>
</div>
<div class="field">
  <%= f.label :foraging_range_radius, I18n.t("devise.fallingfruit.foraging_radius") %><br/>
  <span class="subtext"><%= I18n.t("devise.fallingfruit.foraging_radius_subtext") %></span><br />
  <%= f.text_field :range_radius, :size => 10 %>
  <%= f.select(:range_radius_unit,options_for_select(["km","miles"])) %>
</div>


<% content_for :page_scripts do %>
<script type="text/javascript" src="//maps.googleapis.com/maps/api/js?libraries=drawing&amp;sensor=false"></script>
<script src="/assets/wicket.js" type="text/javascript"></script>
<script src="/assets/wicket-gmap3.js" type="text/javascript"></script>
<%= javascript_include_tag "mapcommon" %>
<script type="text/javascript">

var overlay = undefined;
var geocoder = undefined;
var map = undefined;
var drawingManager = undefined;

function initialize() {

  var mapOptions = {
    center: new google.maps.LatLng(-34.397, 150.644),
    zoom: 8,
    mapTypeId: google.maps.MapTypeId.ROADMAP
  };

  map = new google.maps.Map(document.getElementById('map'),mapOptions);

  <% if user_signed_in? and current_user.range.nil? %>
  // Attempt geolocation
  navigator.geolocation.getCurrentPosition(function(position){
    var lat = position.coords.latitude;
    var lng = position.coords.longitude;
    var latlng = new google.maps.LatLng(lat,lng)
    map.panTo(latlng);
  }, function(error) {
    //use error.code to determine what went wrong
  });
  <% end %>

  drawingManager = new google.maps.drawing.DrawingManager({
    drawingMode: google.maps.drawing.OverlayType.POLYGON,
    drawingControl: true,
    drawingControlOptions: {
      position: google.maps.ControlPosition.TOP_CENTER,
      drawingModes: [
        //google.maps.drawing.OverlayType.CIRCLE, // Wicket library doesn't support Circle deconstruction (yet)
        google.maps.drawing.OverlayType.POLYGON,
        google.maps.drawing.OverlayType.RECTANGLE
      ]
    },
    polygonOptions: {
      clickable: true,
      editable: true,
      zIndex: 1
    },
    rectangleOptions: {
      clickable: true,
      editable: true,
      zIndex: 1
    },
    circleOptions: {
      clickable: true,
      editable: true,
      zIndex: 1
    }
  });

  google.maps.event.addListener(drawingManager, 'overlaycomplete', function(event) {
    if(overlay != undefined){
      overlay.setMap(null);
    }
    drawingManager.setOptions({ drawingControl: false });
    drawingManager.setDrawingMode(null);
    save_overlay_to_dom();
    setup_overlay_listeners();
  });

  geocoder = new google.maps.Geocoder();

  drawingManager.setMap(map);

  <% if user_signed_in? and !current_user.range.nil? %>
  var bounds = wkt_to_bounds('<%= current_user.range %>');
  map.fitBounds(bounds);
  var obj = add_range('<%= current_user.range %>');
  obj.setEditable(true);
  overlay = obj;
  drawingManager.setOptions({ drawingControl: false });
  drawingManager.setDrawingMode(null);
  save_overlay_to_dom();
  setup_overlay_listeners();
  <% end %>
}
google.maps.event.addDomListener(window, 'load', initialize);

function clear_range_overlays(){
  overlay.setMap(null);
  overlay=undefined;
  drawingManager.setOptions({ drawingControl: true });
  document.getElementById('user_range').value = '';
}

function recenter_range_map_to_address() {
  geocoder.geocode( { 'address': $("#address").val() }, function(results, status) {
    if (status == google.maps.GeocoderStatus.OK) {
      map.setZoom(13)
      map.panTo(results[0].geometry.location);
      var cross = new google.maps.Marker({
        icon: '/cross.png',
        position: results[0].geometry.location,
        map: map,
        draggable: false
      });
    } else {
      alert("Geocode was not successful for the following reason: " + status);
    }
  });
}

function save_overlay_to_dom(event){
  var wkt = new Wkt.Wkt();
  wkt.fromObject(overlay);
  document.getElementById('user_range').value = wkt.write();
}

function setup_overlay_listeners(){
  if (overlay.getPath !== undefined && typeof overlay.getPath === 'function') {
    // For Polygons and Polylines
    google.maps.event.addListener(overlay.getPath(), 'set_at', save_overlay_to_dom);
    google.maps.event.addListener(overlay.getPath(), 'remove_at', save_overlay_to_dom);
    google.maps.event.addListener(overlay.getPath(), 'insert_at', save_overlay_to_dom);
  }else{
    google.maps.event.addListener(overlay, 'bounds_changed', save_overlay_to_dom);
  }
}

// avoid having 'Enter' submit the form, instead do recenter
$("#address").keydown(function (e) { 
  if(e.which == 13){
    e.preventDefault(); 
    recenter_map_to_address();
  }
});

</script>
<% end %>

<%= f.hidden_field :range %>