<%= f.label :foraging_range %><br />
<span class="subtext">The area you generally forage in</span>
<div style="width:600px; text-align: right;">
  <input type="text" value="Zoom to address..." onclick="this.value='';" name="address" id="address">
  <button type="button" onclick="recenter_map_to_address();return false;">Zoom</button>
  <button type="button" onclick="overlay.setMap(null);overlay=undefined;return false;">Clear</button>
  <div id="map" style="width:600px; height:400px;"></div>
</div>

<% content_for :page_scripts do %>
<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?libraries=drawing&amp;sensor=false"></script>
<script src="/assets/wicket.src.js" type="text/javascript"></script>
<script src="/assets/wicket-gmap3.src.js" type="text/javascript"></script>
<script type="text/javascript">

overlay = undefined;
geocoder = undefined;
map = undefined;

function initialize() {
  var mapOptions = {
    center: new google.maps.LatLng(-34.397, 150.644),
    zoom: 8,
    mapTypeId: google.maps.MapTypeId.ROADMAP
  };

  map = new google.maps.Map(document.getElementById('map'),mapOptions);

  var drawingManager = new google.maps.drawing.DrawingManager({
    drawingMode: google.maps.drawing.OverlayType.POLYGON,
    drawingControl: true,
    drawingControlOptions: {
      position: google.maps.ControlPosition.TOP_CENTER,
      drawingModes: [
        //google.maps.drawing.OverlayType.MARKER,
        //google.maps.drawing.OverlayType.CIRCLE, // Wicket library doesn't support Circle deconstruction (yet)
        google.maps.drawing.OverlayType.POLYGON,
        //google.maps.drawing.OverlayType.POLYLINE,
        google.maps.drawing.OverlayType.RECTANGLE
      ]
    },
    polygonOptions: {
      clickable: true,
      editable: true,
      zIndex: 1
    },
    rectangleOptions: {
      clickable: true,
      editable: true,
      zIndex: 1
    },
    circleOptions: {
      clickable: true,
      editable: true,
      zIndex: 1
    }
  });

  google.maps.event.addListener(drawingManager, 'overlaycomplete', function(event) {
    if(overlay != undefined){
      overlay.setMap(null);
    }
    overlay = event.overlay;
    var wkt = new Wkt.Wkt();
    wkt.fromObject(overlay);
    document.getElementById('user_range').value = wkt.write();
  });

  geocoder = new google.maps.Geocoder();

  drawingManager.setMap(map);

  <% if user_signed_in? and !current_user.range.nil? %>
  var wkt = new Wkt.Wkt();
  wkt.read('<%= current_user.range %>');
  var obj = wkt.toObject(map.defaults);
  obj.setMap(map);
  overlay = obj;
  if (obj.getBounds !== undefined && typeof obj.getBounds === 'function') {
    // For objects that have defined bounds or a way to get them
    map.fitBounds(obj.getBounds());
  } else {
    if (obj.getPath !== undefined && typeof obj.getPath === 'function') {
      // For Polygons and Polylines
      map.panTo(obj.getPath().getAt(0));
    }
  }
  <% end %>

}
google.maps.event.addDomListener(window, 'load', initialize);

function recenter_map_to_address() {
  geocoder.geocode( { 'address': $("#address").val() }, function(results, status) {
    if (status == google.maps.GeocoderStatus.OK) {
      map.setZoom(13)
      map.panTo(results[0].geometry.location);
      var cross = new google.maps.Marker({
        icon: '/cross.png',
        position: results[0].geometry.location,
        map: map,
        draggable: false
      });
    } else {
      alert("Geocode was not successful for the following reason: " + status);
    }
  });
}

// avoid having 'Enter' submit the form, instead do recenter
$("#address").keydown(function (e) { 
  if(e.which == 13){
    e.preventDefault(); 
    recenter_map_to_address();
  }
});

</script>
<% end %>
<%= f.hidden_field :range %>