<%= render :partial => '/locations/searchbar' %>

<div id="directions_panel">
<div id="travel_mode">
  <b>Mode of travel: </b>
  <select id="travel_mode_select" onchange="calculate_route();">
    <option value="WALKING">Walking</option>
    <option value="BICYCLING">Bicycling</option>
    <option value="TRANSIT">Transit</option>
    <option value="DRIVING">Driving</option>
  </select>
  </div>
  <div id="directions"></div>
</div>
<div id="mainmap_container" style="left: 310px;">
  <div id="map"></div>
  <p id="stamen_attribution" style="display:none;">Map tiles by <a href="http://stamen.com">Stamen Design</a>, under <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>. Data by <a href="http://openstreetmap.org">OpenStreetMap</a>, under <a href="http://creativecommons.org/licenses/by-sa/3.0">CC BY SA</a>.</p>
</div>

<% content_for :page_scripts do %>
<script src="//maps.google.com/maps/api/js?v=3.8&amp;sensor=false&amp;key=&amp;libraries=geometry&amp;language=&amp;hl=&amp;region=" type="text/javascript"></script>
<script type="text/javascript" src="http://maps.stamen.com/js/tile.stamen.js?v1.2.1"></script>
<script type="text/javascript" src="http://google-maps-utility-library-v3.googlecode.com/svn/tags/keydragzoom/2.0.9/src/keydragzoom_packed.js"></script>
<script type="text/javascript" charset="utf-8">

  // ================= globals ==================
  
  var directionsDisplay;
  var directionsService = new google.maps.DirectionsService();
  //var skip_ids = [<%= @route_locations.collect{ |lr| lr.location.id }.join(",") %>];
  var skip_ids = null;
  <% if @route_locations.length > 2 %>
  var waypoints = [<%= (1..@route_locations.length-2).collect{ |i|
                     "{location: new google.maps.LatLng(#{@route_locations[i].location.lat},#{@route_locations[i].location.lng})}" }.join(",")
                %>];
  <% else %>
  var waypoints = [];
  <% end %>
  var origin = new google.maps.LatLng(<%= @start_location.lat %>,<%= @start_location.lng %>);
  var destination = new google.maps.LatLng(<%= @stop_location.lat %>,<%= @stop_location.lng %>);
  var zoom = 15;
  var lat = <%= @start_location.lat %>;
  var lng = <%= @start_location.lng %>;
  var type = google.maps.MapTypeId.ROADMAP;
  var travelMode = '<%= @route.transport_type.upcase %>';

  // ================= functions =================
  
  // Enable the visual refresh
  google.maps.visualRefresh = true;
  
  function initialize() {
    
    basemap(lat,lng,zoom,type);
    geocoder = new google.maps.Geocoder();
    directionsDisplay = new google.maps.DirectionsRenderer();
    directionsDisplay.setOptions({suppressMarkers: true});
    directionsDisplay.setMap(map);
    directionsDisplay.setPanel(document.getElementById('directions'));
    
    // default is labels on
    labelize_markers();
    $("#labels").prop('checked',true);
      
    google.maps.event.addListener(map, 'rightclick', function(event) {
      remove_add_marker();
      place_add_marker(event.latLng);
    });

    google.maps.event.addListenerOnce(map, 'tilesloaded', function(event) {
      var bounds = new google.maps.LatLngBounds();
      <% @route_locations.each{ |lr| %>
        bounds.extend(new google.maps.LatLng(<%= lr.location.lat %>,<%= lr.location.lng %>));
      <% } %>
      map.fitBounds(bounds);
      calculate_route();

      // draw the markers and whatnot
      google.maps.event.addListenerOnce(map, 'idle', function(){
        update_display(true,zoom,bounds);
      });

      google.maps.event.addListener(map, 'idle', function(){
        update_display(false);
      });

      google.maps.event.addListener(map, 'zoom_changed', function() {
        google.maps.event.addListenerOnce(map, 'idle', function(){
          update_display(false);
        });
      });
    });
  }
  
  function calculate_route() {
    travelMode = document.getElementById('travel_mode_select').value;
     var request = {
       origin: origin,
       destination: destination,
       waypoints: waypoints,
       travelMode: google.maps.TravelMode[travelMode]
     };
     // Route the directions and pass the response to a
     // function to create markers for each step.
     directionsService.route(request, function(response, status) {
       if (status == google.maps.DirectionsStatus.OK) {
         //var warnings = document.getElementById('warnings_panel');
         //warnings.innerHTML = '<b>' + response.routes[0].warnings + '</b>';
         directionsDisplay.setDirections(response);
         //showSteps(response);
       }
     });
   }

  // ================== main-level code ===================

  $("#travel_mode_select").val(travelMode);
  google.maps.event.addDomListener(window, 'load', initialize);

  // hide the 'zoom to me' button if browser isn't supporting geolocation
  if(!navigator.geolocation){
    $('#recenter_button').hide();
  }
  navigator.geolocation.getCurrentPosition(function(position){},function(error){
    $('#recenter_button').hide();
  });
  
</script>
<%= javascript_include_tag "maplabel" %>
<%= javascript_include_tag "progressBar" %>
<%= javascript_include_tag "richmarker" %>
<%= javascript_include_tag "mapcommon" %>
<%= javascript_include_tag "mainmap" %>
<% end %>
