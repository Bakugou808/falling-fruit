<%= render :partial => '/locations/searchbar' %>

<div id="mainmap_container">
  <div id="map"></div>
  <p id="stamen_attribution" style="display:none;">Map tiles by <a href="http://stamen.com">Stamen Design</a>, under <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>. Data by <a href="http://openstreetmap.org">OpenStreetMap</a>, under <a href="http://creativecommons.org/licenses/by-sa/3.0">CC BY SA</a>.</p>
</div>

<% content_for :page_scripts do %>
<script src="//maps.google.com/maps/api/js?v=3.8&amp;sensor=false&amp;key=&amp;libraries=geometry&amp;language=&amp;hl=&amp;region=" type="text/javascript"></script>
<script type="text/javascript" src="http://maps.stamen.com/js/tile.stamen.js?v1.2.1"></script>
<script type="text/javascript" charset="utf-8">

  var directionsDisplay;
  var directionsService = new google.maps.DirectionsService();
  //var skip_ids = [<%= @route_locations.collect{ |lr| lr.location.id }.join(",") %>];
  var skip_ids = null;
  <% if @route_locations.length > 2 %>
  var waypoints = [<%= (1..@route_locations.length-2).collect{ |i|
                     "{location: new google.maps.LatLng(#{@route_locations[i].location.lat},#{@route_locations[i].location.lng})}" }.join(",")
                %>];
  <% else %>
  var waypoints = [];
  <% end %>
  var origin = new google.maps.LatLng(<%= @start_location.lat %>,<%= @start_location.lng %>);
  var destination = new google.maps.LatLng(<%= @stop_location.lat %>,<%= @stop_location.lng %>);

  // ================= functions =================
  
  // Enable the visual refresh
  google.maps.visualRefresh = true;
  
  function initialize() {
    var ini_zoom = 15;
    var ini_lat = <%= @start_location.lat %>;
    var ini_lng = <%= @start_location.lng %>;
    var toner = "toner-lite";
 	   
    var mapOptions = {
      zoom: ini_zoom,
      center: new google.maps.LatLng(ini_lat,ini_lng),
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      mapTypeControlOptions: {
        mapTypeIds: [google.maps.MapTypeId.ROADMAP, google.maps.MapTypeId.TERRAIN, google.maps.MapTypeId.SATELLITE, google.maps.MapTypeId.HYBRID, toner]
      }
    };
    map = new google.maps.Map(document.getElementById('map'),mapOptions);
    geocoder = new google.maps.Geocoder();
    directionsDisplay = new google.maps.DirectionsRenderer();
    directionsDisplay.setOptions({suppressMarkers: true});
    directionsDisplay.setMap(map);
    pb = progressBar();
    map.controls[google.maps.ControlPosition.RIGHT].push(pb.getDiv());
    
    // Stamen Toner (B&W) map
    var tonerType = new google.maps.StamenMapType(toner);
    tonerType.name = "B&W";
    map.mapTypes.set(toner, tonerType);
    
    // Bicycle map (and control)
    bicycleControl(map);
    
    google.maps.event.addListener(map, 'rightclick', function(event) {
      remove_add_marker();
      place_add_marker(event.latLng);
    });

    google.maps.event.addListener(map, 'click', function(event) {
      if(openMarker != null && openInfoWindow != null){
        openInfoWindow.close();
        openMarker = null;
        openInfoWindow = null;
      }
    });
    
    google.maps.event.addListener(map, 'maptypeid_changed', function(event) {
      update_attribution();
    });
    
    google.maps.event.addListenerOnce(map, 'tilesloaded', function(event) {
      var bounds = new google.maps.LatLngBounds();
      <% @route_locations.each{ |lr| %>
      bounds.extend(new google.maps.LatLng(<%= lr.location.lat %>,<%= lr.location.lng %>));
      <% } %>
      map.fitBounds(bounds);

      var request = {
        origin: origin,
        destination: destination,
        waypoints: waypoints,
        travelMode: google.maps.TravelMode.WALKING
      };

      // Route the directions and pass the response to a
      // function to create markers for each step.
      directionsService.route(request, function(response, status) {
        if (status == google.maps.DirectionsStatus.OK) {
          //var warnings = document.getElementById('warnings_panel');
          //warnings.innerHTML = '<b>' + response.routes[0].warnings + '</b>';
          directionsDisplay.setDirections(response);
          //showSteps(response);
        }
      });

      // draw the markers and whatnot
      google.maps.event.addListenerOnce(map, 'idle', function(){
        update_display(true,ini_zoom,bounds);
      });

      google.maps.event.addListener(map, 'bounds_changed', function() {
        google.maps.event.addListenerOnce(map, 'idle', function(){
          update_display(false);
        });
      });

      google.maps.event.addListener(map, 'zoom_changed', function() {
        google.maps.event.addListenerOnce(map, 'idle', function(){
          update_display(false);
        });
      });

      // default is labels on
      labelize_markers();
      $("#labels").prop('checked',true);
    });
             
    map.setTilt(0); 
  }

  // ================== main-level code ===================

  google.maps.event.addDomListener(window, 'load', initialize);

  // hide the 'zoom to me' button if browser isn't supporting geolocation
  if(!navigator.geolocation){
    $('#recenter_button').hide();
  }
  navigator.geolocation.getCurrentPosition(function(position){},function(error){
    $('#recenter_button').hide();
  });
</script>
<%= javascript_include_tag "maplabel" %>
<%= javascript_include_tag "progressBar" %>
<%= javascript_include_tag "richmarker" %>
<%= javascript_include_tag "mapcommon" %>
<%= javascript_include_tag "mainmap" %>
<% end %>
