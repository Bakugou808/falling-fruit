<div id="editmap_container">
  <div id="map"></div>
  <p id="stamen_attribution" style="display:none;">Map tiles by <a href="http://stamen.com">Stamen Design</a>, under <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>. Data by <a href="http://openstreetmap.org">OpenStreetMap</a>, under <a href="http://creativecommons.org/licenses/by-sa/3.0">CC BY SA</a>.</p>
</div>

<% content_for :page_scripts do %>
<script src="//maps.google.com/maps/api/js?v=3.8&amp;sensor=false&amp;key=&amp;libraries=geometry&amp;language=&amp;hl=&amp;region=" type="text/javascript"></script>
<script type="text/javascript" src="http://maps.stamen.com/js/tile.stamen.js?v1.2.1"></script>
<script type="text/javascript" src="http://google-maps-utility-library-v3.googlecode.com/svn/tags/keydragzoom/2.0.9/src/keydragzoom_packed.js"></script>
<script type="text/javascript" charset="utf-8">
  // There are three scenarios here:
  // 1) We are given a lat/lng in the post params (user clicked on the map to add something).
  //    Which we'll know because @location will be a new object with lat/lng set and 
  //    the location_lat and location_lng fields will have stuff in them.
  // 2) We aren't given a lat/lng in the post params, but we're able to use the geolocation
  //    library to guess the user's position. We'll know this because location_lat and location_lng
  //    will be empty and geolocation will succeed.
  // 3) We aren't given a lat/lng and geolocation fails. In this case marker will be left set to null,
  //    and nothing should be placed on the map until the user enters an address or lat/lng

  // ================= globals ==================
	
  var marker = null;
  var nag = null;
  var nagOpen = null;
  var nagHtml = '<div id="editmarker"><b>Please adjust the marker to the position of the source.</b><br/><br/>Check the satellite view - the source may be visible from space!</div>';
  var type = google.maps.MapTypeId.ROADMAP;

  // ================= functions =================

  // Enable the visual refresh
  google.maps.visualRefresh = true;
  
  function initialize() {
  
    // No user-provided lat/lng
    // (location_lat and location_lng will be empty)
    if($('#location_lat').val() == "" && $('#location_lng').val() == ""){
      
      // Attempt geolocation
      navigator.geolocation.getCurrentPosition(function(position){
        var lat = position.coords.latitude;
        var lng = position.coords.longitude;
        var zoom = 15;
        basemap(lat,lng,zoom,type);
        initialize_marker(lat,lng);
      	$('#location_lat').val(lat);
        $('#location_lng').val(lng);
      },function(error){
        //use error.code to determine what went wrong
      });
      var watchID = navigator.geolocation.watchPosition(function(position) {
        var lat = position.coords.latitude;
        var lng = position.coords.longitude;
        var latlng = new google.maps.LatLng(lat,lng)
        if(marker != null){
        	// Chrome was complaining of marker being null
					marker.setPosition(latlng);
				}
				map.panTo(latlng);
        $('#location_lat').val(lat);
        $('#location_lng').val(lng);
      },function(error){
        //...
      },{enableHighAccuracy:true, maximumAge:30000, timeout:30000});
      
      // If geolocation failed, load map without marker
      if($('#location_lat').val() == "" && $('#location_lng').val() == ""){
      	var lat = 0;
  			var lng = 0;
  			var zoom = 1;
  			basemap(lat,lng,zoom,type);
      }
      
    // User provided lat/lng
    // (location_lat and location_lng will have values)
    }else{
      var lat = $("#location_lat").val();
      var lng = $("#location_lng").val();
      var zoom = 15;
      basemap(lat,lng,zoom,type);
      initialize_marker(lat,lng)
    }
  
		// Update markers once we're done panning and zooming
		google.maps.event.addListenerOnce(map, 'idle', function(){
				do_markers(map.getBounds(),null,true);
		});
		
		// Update location markers when bounds change
		google.maps.event.addListener(map, 'bounds_changed', function() {
			google.maps.event.addListenerOnce(map, 'idle', function(){
				var zoom = map.getZoom();
				var bounds = map.getBounds();
				if(prior_bounds == null && prior_zoom == null){
					prior_zoom = zoom;
					prior_bounds = bounds;
					return;
				}
				if(zoom > 11 && prior_bounds != bounds){
					do_markers(bounds,null,true);
				}
				prior_zoom = zoom;
				prior_bounds = bounds;
			});
		});
	
	}
	
	// Update marker position from user-provided address
  function update_marker_address(){
  
  	// If empty, do nothing
    if($("#location_address").val() == "") return;
    geocoder.geocode( { 'address': $("#location_address").val() }, function(results, status) {
      
      // If valid address, move existing (or place new) marker
      if(status == google.maps.GeocoderStatus.OK){
        var lat = results[0].geometry.location.lat();
        var lng = results[0].geometry.location.lng();
        var latlng = results[0].geometry.location
        $("#location_lat").val(lat);
        $("#location_lng").val(lng);
        map.panTo(latlng);
        map.setZoom(15);
        if(marker != null){
					marker.setPosition(latlng);
				}else{
        	initialize_marker(lat,lng);
        }
        nag.open(map,marker);
        nagOpen = true;
        
      // Otherwise, return geocoding errors
      }else{
        alert("Geocode was not successful for the following reason: " + status);
      }
    });
  }
  
  // Update marker position from user-provided latitude and longitude
  function update_marker_latlng(){
  	var lat = $("#location_lat").val();
  	var lng = $("#location_lng").val();

  	// If empty, do nothing
    if(lat == "" || lng == "" ) return;
		
		// If numeric, move existing (or place new) marker
		// Out of range: latitude is snapped to [-90, 90], longitude converted to [-180, 180]
		var latlng = new google.maps.LatLng(lat,lng, false)
		if(!isNaN(latlng.mb) && !isNaN(latlng.nb)){
			map.panTo(latlng);
			map.setZoom(15);
			if(marker != null){
				marker.setPosition(latlng);
			}else{
				initialize_marker(lat,lng);
			}
			nag.open(map,marker);
			nagOpen = true;
			
		// Otherwise, return error
  	}else{
			alert("Latitude and longitude must both be numbers.");
  	}
  }
  
  // Initialize map marker (marker) and infowindow (nag)
  function initialize_marker(lat,lng){
  	
  	var latlng = new google.maps.LatLng(lat,lng)
  	
  	// Marker
  	marker = new google.maps.Marker({
			icon: '',
			position: latlng, 
			map: map,
			draggable: true
		});
		
		// Infowindow
		nag = new google.maps.InfoWindow({
			content: nagHtml
		});
		nagOpen = false;
		
		// Event listeners
		
		// Open nag once tiles loaded 
		google.maps.event.addListenerOnce(map, 'tilesloaded', function(event) {
			nag.open(map,marker);
			nagOpen = true;
		});
		
		// Update lat, lng when marker moved
		google.maps.event.addListener(marker, 'dragend', function() {
			$("#location_lat").val(this.getPosition().lat());
			$("#location_lng").val(this.getPosition().lng());
		});
		
		// Record closing of nag
		google.maps.event.addListener(nag, 'closeclick', function(event) {
			nagOpen = false;
		});
		
		// Toggle nag open/close on click of marker
		google.maps.event.addListener(marker, 'click', function(event) {
			if(nagOpen){
				nag.close();
				nagOpen = false;
			}else{
				nag.open(map,marker);
				nagOpen = true;
			}
		});
  }

  // ================== main-level code ===================

  google.maps.event.addDomListener(window, 'load', initialize);

</script>
<%= javascript_include_tag "maplabel" %>
<%= javascript_include_tag "progressBar" %>
<%= javascript_include_tag "richmarker" %>
<%= javascript_include_tag "mapcommon" %>
<% end %>

<%= render 'form' %>
