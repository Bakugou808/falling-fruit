<div id="searchbar">
 <div id="searchcontrols">
 
 	<!-- Permalink | Embed -->
  <span class="nowrap" id="rightcontrols">
   <a href="#" id="permalink" onclick="update_url('#permalink'); return false;" title="<%= I18n.t("locations.searchbar.link_hover") %>"><%= I18n.t("glossary.links", :count => 1) %></a> |
   <a href="#" id="embedlink" onclick="show_embed_html('#embed_modal'); return false;" title="<%= I18n.t("locations.searchbar.embed_hover") %>"><%= I18n.t("glossary.embed") %></a>
   <div id="embed_modal" style="display:none;" title="<%= I18n.t("locations.searchbar.embed_hover") %> (iFrame HTML)"></div>
  </span>
  
  <span class="nowrap">  
   <!-- Address -->
   <b><%= I18n.t("glossary.address", ) %></b>
   <input id="address" name="address" placeholder="<%= I18n.t("glossary.type_and_press_enter") %>" onkeypress="if(event.keyCode == 13){ recenter_map_to_address(); }" size="25" style="margin-right:0;">
    <span id="recenter_button">
    	&middot;
    	<button onclick="recenter_map()"><%= I18n.t("glossary.zoom_to_me") %></button>
    </span>
    &middot; 
  </span>
  
  <!-- Type Filter -->
  <span class="nowrap">
    <b><%= I18n.t("glossary.filter") %></b>
    <%= text_field_tag(:type_filter) %>
    &middot;
  </span>
  
	 <!-- Labels -->
   <span id="hidden_controls" style="display:none;">
     <span class="nowrap">
      <b><%= I18n.t("glossary.labels") %></b>
      <input type="checkbox" id="labels" value="1" onclick="if(!this.checked){ delabelize_markers() }else{ labelize_markers(); } update_permalink();" <%= "checked" if (!@perma.nil? and !@perma[:labels].nil? and @perma[:labels]) %> > 
      &middot;
     </span>
   </span>

   <!-- Tree inventories -->
   <span class="nowrap">
     <b><%= I18n.t("glossary.tree_inventories", :count => 2) %></b><span class="subtext" style="cursor:help;position:relative;top:-0.5em;" onclick="open_inventories_help_modal();">[?]</span>

     <input type="checkbox" id="muni" value="1" onclick="clear_markers();update_display(true);" <%= "checked" unless (!@perma.nil? and !@perma[:muni].nil? and !@perma[:muni]) or (!@location.nil? and !@location.import.nil? and !@location.import.muni)%> >
   </span>
   <div id="tree_inventories_help" style="display:none;" title="<%= I18n.t("locations.searchbar.tree_inventories_modal_title") %>">
     <img src="/paloalto.jpg" style="float:right;margin:0.4em 0 0.5em 1em;" width="200">
     <%= I18n.t("locations.searchbar.tree_inventories_modal") %>
   </div>
   
   <!-- Download -->
   <span id="export_data" style="display: none;">
    &middot;
    <span class="nowrap">
     <a href="#" id="get_data_link"><%= I18n.t("glossary.download") %></a>
    </span>
   </span>
   
 </div>
</div>

<% content_for :page_scripts do %>
<script type="text/javascript">
  var base_type_data_original = <%= Type.hash_tree(@categories).to_json.html_safe %>;
  // FIXME: Dirty hack to keep filter_by_types_hash from modifying base_type_data_original
  function filter_by_types_hash_wrapper(x) {
  	var base_type_data = $.extend(true, [], x);
  	return filter_by_types_hash(base_type_data);
  }
  function filter_by_types_hash(children) {
    var mp = markersPartial ? "+" : "";
    var ret = children.filter(function (obj) {
    	return (obj["children"] != undefined && obj["children"].length > 0) || types_hash[obj["id"]] != undefined; 
    });
    for (var i = 0; i < ret.length; i++) {
      ret[i]["text"] = ret[i]["name"] + " (" + (types_hash[ret[i]["id"]] ? types_hash[ret[i]["id"]] : "0") + mp + ")";
      ret[i]["id"] = [ret[i]["id"], ret[i]["children_ids"]].join(",");
      if (ret[i]["children"] != undefined) {
        ret[i]["children"] = filter_by_types_hash(ret[i]["children"])
      }
    }
    return ret;
  }
	
	jQuery(document).ready(function(){
		$('#type_filter').select2({
			<% unless @types.nil? or @types.empty? %>
				placeholder: "<%= @types.collect{ |t| t.name }.join(" + ") %>",
				val: type_filter,
			<% else %>
				placeholder: "<%= I18n.t("glossary.edible_type") %>",
			<% end %>
				data: function (term,page) {
						return { text: 'text', results: filter_by_types_hash_wrapper(base_type_data_original) };
				},
				allowClear: true,
				allowedMethods: ['updateResults']
		});
		// Needed so that default placeholder (not type name) is shown when select is cleared
		$('#type_filter').attr("placeholder", "<%= I18n.t("glossary.edible_type") %>");
		$('#type_filter').on("change",function() {
			var zoom = map.getZoom();
			if ($("#type_filter").val() == "") {
				type_filter = undefined;
				if (zoom <= 12) {
					update_display();
				} else {
					clear_type_filter();
				}
			} else {
				type_filter = $("#type_filter").val().split(',').map(Number);
				if (zoom <= 12) {
					update_display();
				} else {
					apply_type_filter();
				}
			}
			update_permalink();
		});
	});
</script>
<% end %>